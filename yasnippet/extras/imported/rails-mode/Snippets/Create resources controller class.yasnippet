# -*- mode: snippet -*-
# uuid: F90BFB23-5706-484B-8108-B376A988C0A0
# key: resources
# contributor: Translated from textmate snippet by PROGRAM_NAME
# name: Create resources controller class
## condition: "
# --
class ${1:Model}sController < ApplicationController
  before_filter :find_${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}, :only => [:show, :edit, :update, :destroy]

  # GET /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s
  # GET /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s.xml
  def index
    @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s = ${1:Model}.all

    respond_to do |wants|
      wants.html # index.html.erb
      wants.xml  { render :xml => @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s }
    end
  end

  # GET /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s/1
  # GET /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s/1.xml
  def show
    respond_to do |wants|
      wants.html # show.html.erb
      wants.xml  { render :xml => @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))} }
    end
  end

  # GET /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s/new
  # GET /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s/new.xml
  def new
    @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))} = ${1:Model}.new

    respond_to do |wants|
      wants.html # new.html.erb
      wants.xml  { render :xml => @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))} }
    end
  end

  # GET /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s/1/edit
  def edit
  end

  # POST /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s
  # POST /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s.xml
  def create
    @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))} = ${1:Model}.new(params[:${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}])

    respond_to do |wants|
      if @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}.save
        flash[:notice] = '${1:Model} was successfully created.'
        wants.html { redirect_to(@${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}) }
        wants.xml  { render :xml => @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}, :status => :created, :location => @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))} }
      else
        wants.html { render :action => "new" }
        wants.xml  { render :xml => @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s/1
  # PUT /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s/1.xml
  def update
    respond_to do |wants|
      if @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}.update_attributes(params[:${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}])
        flash[:notice] = '${1:Model} was successfully updated.'
        wants.html { redirect_to(@${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}) }
        wants.xml  { head :ok }
      else
        wants.html { render :action => "edit" }
        wants.xml  { render :xml => @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s/1
  # DELETE /${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s/1.xml
  def destroy
    @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}.destroy

    respond_to do |wants|
      wants.html { redirect_to(${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}s_url) }
      wants.xml  { head :ok }
    end
  end

  private
    def find_${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))}
      @${1:$(and (yas/text) (concat (downcase (substring yas/text 0 1)) (substring yas/text 1)))} = ${1:Model}.find(params[:id])
    end

end
